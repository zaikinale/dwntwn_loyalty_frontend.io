{"version":3,"file":"index.js","sources":["../src/casing/camelToKebab.ts","../src/casing/camelToSnake.ts","../src/casing/camelToSnakeObjKeys.ts","../src/casing/snakeToCamel.ts","../src/casing/snakeToCamelObjKeys.ts","../src/casing/deepSnakeToCamelObjKeys.ts","../src/casing/snakeToKebab.ts","../src/storage/storage.ts","../src/createCbCollector.ts","../src/createLogger.ts"],"sourcesContent":["/**\n * Converts string value from camel case to kebab case.\n * @param value - value to convert.\n */\nexport function camelToKebab(value: string): string {\n  return value.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`);\n}\n","export type CamelToSnakeCase<T extends string> = T extends `${infer First}${infer Rest}`\n  ? `${First extends Capitalize<First> ? '_' : ''}${Lowercase<First>}${CamelToSnakeCase<Rest>}`\n  : T;\n\n/**\n * Converts string value from camel case to snake case.\n * @param value - value to convert.\n */\nexport function camelToSnake<T extends string>(value: T): CamelToSnakeCase<T> {\n  return value.replace(/[A-Z]/g, (match) => `_${match.toLowerCase()}`) as CamelToSnakeCase<T>;\n}","import { camelToSnake, type CamelToSnakeCase } from '@/casing/camelToSnake.js';\n\nexport type ConvertCamelKeysToSnakeCase<T> = {\n  [K in keyof T as CamelToSnakeCase<string & K>]: T[K];\n};\n\n/**\n * Converts object keys from snake to camel case.\n * @param value - value to convert.\n */\nexport function camelToSnakeObjKeys<T extends object>(value: T): ConvertCamelKeysToSnakeCase<T> {\n  return Object.entries(value).reduce<ConvertCamelKeysToSnakeCase<T>>((acc, [k, v]) => {\n    acc[camelToSnake(k) as keyof ConvertCamelKeysToSnakeCase<T>] = v;\n    return acc;\n  }, {} as ConvertCamelKeysToSnakeCase<T>);\n}","export type SnakeToCamelCase<S extends string> =\n  S extends `${infer Head}_${infer Tail}`\n    ? `${Head}${Capitalize<SnakeToCamelCase<Tail>>}`\n    : S;\n\n/**\n * Converts string value from snake case to camel case.\n * @param value - value to convert.\n */\nexport function snakeToCamel<T extends string>(value: T): SnakeToCamelCase<T> {\n  return value.replace(/_[a-z]/g, (m) => m[1].toUpperCase()) as SnakeToCamelCase<T>;\n}","import { snakeToCamel, type SnakeToCamelCase } from '@/casing/snakeToCamel.js';\n\nexport type ConvertSnakeKeysToCamelCase<T> = {\n  [K in keyof T as SnakeToCamelCase<string & K>]: T[K];\n};\n\n/**\n * Converts object keys from snake to camel case.\n * @param value - value to convert.\n */\nexport function snakeToCamelObjKeys<T extends object>(value: T): ConvertSnakeKeysToCamelCase<T> {\n  return Object.entries(value).reduce<ConvertSnakeKeysToCamelCase<T>>((acc, [k, v]) => {\n    acc[snakeToCamel(k) as keyof ConvertSnakeKeysToCamelCase<T>] = v;\n    return acc;\n  }, {} as ConvertSnakeKeysToCamelCase<T>);\n}","import { snakeToCamelObjKeys } from '@/casing/snakeToCamelObjKeys.js';\nimport type { SnakeToCamelCase } from '@/casing/snakeToCamel.js';\n\nexport type DeepConvertSnakeKeysToCamelCase<T> = T extends infer U\n    ? U extends object\n      ? U extends Date\n        ? U\n        : U extends (infer Item)[]\n          ? DeepConvertSnakeKeysToCamelCase<Item>[]\n          : {\n            [K in keyof U as SnakeToCamelCase<string & K>]: DeepConvertSnakeKeysToCamelCase<U[K]>\n          } & {}\n      : U\n    : T;\n\n/**\n * Deeply converts object keys from snake to camel case.\n * @param value - value to convert.\n */\nexport function deepSnakeToCamelObjKeys<T extends object>(\n  value: T,\n): DeepConvertSnakeKeysToCamelCase<T> {\n  const camelCased = snakeToCamelObjKeys(value);\n  for (const key in camelCased) {\n    const value = camelCased[key];\n    if (value && typeof value === 'object' && !(value instanceof Date)) {\n      (camelCased as any)[key] = Array.isArray(value)\n        ? value.map(deepSnakeToCamelObjKeys)\n        : deepSnakeToCamelObjKeys(value);\n    }\n  }\n  return camelCased as DeepConvertSnakeKeysToCamelCase<T>;\n}","/**\n * Converts string value from snake case to kebab case.\n * @param value - value to convert.\n */\nexport function snakeToKebab(value: string): string {\n  return value.replace(/_([a-z])/g, (_, letter) => `-${letter.toLowerCase()}`);\n}\n","/**\n * Converts a passed storage key to the formatted state.\n * @param key - storage key.\n */\nfunction formatKey(key: string): string {\n  return `tapps/${key}`;\n}\n\n/**\n * Saves value in the storage.\n * @param key - storage key.\n * @param value - storage value.\n */\nexport function setStorageValue<T>(key: string, value: T): void {\n  sessionStorage.setItem(formatKey(key), JSON.stringify(value));\n}\n\n/**\n * Extracts value from the storage.\n * @param key - storage key.\n */\nexport function getStorageValue<R>(key: string): R | undefined {\n  const value = sessionStorage.getItem(formatKey(key));\n  try {\n    return value ? JSON.parse(value) as R : undefined;\n  } catch {\n  }\n}\n","export type CallbackFn = () => void;\n\n/**\n * Returns a tuple, containing function to add cleanup, call cleanup, and flag showing whether\n * cleanup was called. Cleanup will not be performed in case, it was done before.\n */\nexport function createCbCollector(...cbs: (CallbackFn | CallbackFn[])[]): [\n  add: (...fns: CallbackFn[]) => void,\n  call: () => void,\n] {\n  const callbacks = cbs.flat(1);\n\n  return [\n    callbacks.push.bind(callbacks),\n    () => {\n      callbacks.forEach(cb => {\n        cb();\n      });\n    },\n  ];\n}","/**\n * Message log level.\n */\nexport type LogLevel = 'log' | 'error' | 'warn';\n\nexport interface LoggerOptions {\n  bgColor?: string;\n  textColor?: string;\n  /**\n   * True if logs are enabled.\n   * @default true\n   */\n  shouldLog?: boolean | (() => boolean);\n}\n\nexport type LoggerFn = (...args: any[]) => void;\nexport type LoggerForceFn = (...args: any[]) => void;\n\nexport interface Logger {\n  /**\n   * Prints an error message into the console.\n   * @param args - items to log.\n   */\n  error: LoggerFn;\n  /**\n   * Prints an error message into the console ignoring the `shouldLog`\n   * constructor option.\n   * @param args - items to log.\n   */\n  forceError: LoggerForceFn;\n  /**\n   * Prints a log message into the console ignoring the `shouldLog` constructor\n   * option.\n   * @param args - items to log.\n   */\n  forceLog: LoggerForceFn;\n  /**\n   * Prints a warning message into the console ignoring the `shouldLog`\n   * constructor option.\n   * @param args - items to log.\n   */\n  forceWarn: LoggerForceFn;\n  /**\n   * Prints a log message into the console.\n   * @param args - items to log.\n   */\n  log: LoggerFn;\n  /**\n   * Prints a warning message into the console.\n   * @param args - items to log.\n   */\n  warn: LoggerFn;\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nexport function createLogger(scope: string, options?: LoggerOptions): Logger {\n  options ||= {};\n  const {\n    textColor,\n    bgColor,\n    shouldLog: optionsShouldLog,\n  } = options;\n  const shouldLogValue = optionsShouldLog === undefined ? true : optionsShouldLog;\n  const shouldLog = typeof shouldLogValue === 'boolean'\n    ? () => shouldLogValue\n    : shouldLogValue;\n\n  /**\n   * Prints a message into the console.\n   * @param level - log level.\n   * @param force - should `shouldLog` value be ignored.\n   * @param args - arguments.\n   */\n  const print = (level: LogLevel, force: boolean, ...args: any[]): void => {\n    if (force || shouldLog()) {\n      const commonCss = 'font-weight:bold;padding:0 5px;border-radius:100px';\n      const [timeBgColor, timeTextColor, prefix] = {\n        log: ['#0089c3', 'white', 'INFO'],\n        error: ['#ff0000F0', 'white', 'ERR'],\n        warn: ['#D38E15', 'white', 'WARN'],\n      }[level];\n      console[level](\n        `%c${prefix} ${\n          Intl\n            .DateTimeFormat('en-GB', {\n              hour: '2-digit',\n              minute: '2-digit',\n              second: '2-digit',\n              fractionalSecondDigits: 3,\n              timeZone: 'UTC',\n            })\n            .format(new Date())\n        }%c %c${scope}`,\n        `${commonCss};background-color:${timeBgColor};color:${timeTextColor}`,\n        '',\n        `${commonCss};${textColor ? `color:${textColor};` : ''}${bgColor ? `background-color:${bgColor}` : ''}`,\n        ...args,\n      );\n    }\n  };\n\n  return ([\n    ['log', 'forceLog'],\n    ['warn', 'forceWarn'],\n    ['error', 'forceError'],\n  ] as const).reduce<Logger>((acc, [level, forceMethod]) => {\n    acc[level] = print.bind(undefined, level, false);\n    acc[forceMethod] = print.bind(undefined, level, true);\n    return acc;\n  }, {} as Logger);\n}"],"names":["camelToKebab","value","match","camelToSnake","camelToSnakeObjKeys","acc","k","v","snakeToCamel","m","snakeToCamelObjKeys","deepSnakeToCamelObjKeys","camelCased","key","snakeToKebab","_","letter","formatKey","setStorageValue","getStorageValue","createCbCollector","cbs","callbacks","cb","createLogger","scope","options","textColor","bgColor","optionsShouldLog","shouldLogValue","shouldLog","print","level","force","args","commonCss","timeBgColor","timeTextColor","prefix","forceMethod"],"mappings":"AAIO,SAASA,EAAaC,GAAuB;AAC3C,SAAAA,EAAM,QAAQ,UAAU,CAACC,MAAU,IAAIA,EAAM,YAAa,CAAA,EAAE;AACrE;ACEO,SAASC,EAA+BF,GAA+B;AACrE,SAAAA,EAAM,QAAQ,UAAU,CAACC,MAAU,IAAIA,EAAM,YAAa,CAAA,EAAE;AACrE;ACAO,SAASE,EAAsCH,GAA0C;AACvF,SAAA,OAAO,QAAQA,CAAK,EAAE,OAAuC,CAACI,GAAK,CAACC,GAAGC,CAAC,OACzEF,EAAAF,EAAaG,CAAC,CAAyC,IAAIC,GACxDF,IACN,EAAoC;AACzC;ACNO,SAASG,EAA+BP,GAA+B;AACrE,SAAAA,EAAM,QAAQ,WAAW,CAACQ,MAAMA,EAAE,CAAC,EAAE,aAAa;AAC3D;ACDO,SAASC,EAAsCT,GAA0C;AACvF,SAAA,OAAO,QAAQA,CAAK,EAAE,OAAuC,CAACI,GAAK,CAACC,GAAGC,CAAC,OACzEF,EAAAG,EAAaF,CAAC,CAAyC,IAAIC,GACxDF,IACN,EAAoC;AACzC;ACIO,SAASM,EACdV,GACoC;AAC9B,QAAAW,IAAaF,EAAoBT,CAAK;AAC5C,aAAWY,KAAOD,GAAY;AACtBX,UAAAA,IAAQW,EAAWC,CAAG;AAC5B,IAAIZ,KAAS,OAAOA,KAAU,YAAY,EAAEA,aAAiB,UAC1DW,EAAmBC,CAAG,IAAI,MAAM,QAAQZ,CAAK,IAC1CA,EAAM,IAAIU,CAAuB,IACjCA,EAAwBV,CAAK;AAAA,EACnC;AAEK,SAAAW;AACT;AC5BO,SAASE,EAAab,GAAuB;AAC3C,SAAAA,EAAM,QAAQ,aAAa,CAACc,GAAGC,MAAW,IAAIA,EAAO,YAAY,CAAC,EAAE;AAC7E;ACFA,SAASC,EAAUJ,GAAqB;AACtC,SAAO,SAASA,CAAG;AACrB;AAOgB,SAAAK,EAAmBL,GAAaZ,GAAgB;AAC9D,iBAAe,QAAQgB,EAAUJ,CAAG,GAAG,KAAK,UAAUZ,CAAK,CAAC;AAC9D;AAMO,SAASkB,EAAmBN,GAA4B;AAC7D,QAAMZ,IAAQ,eAAe,QAAQgB,EAAUJ,CAAG,CAAC;AAC/C,MAAA;AACF,WAAOZ,IAAQ,KAAK,MAAMA,CAAK,IAAS;AAAA,EAAA,QAClC;AAAA,EAAA;AAEV;ACrBO,SAASmB,KAAqBC,GAGnC;AACM,QAAAC,IAAYD,EAAI,KAAK,CAAC;AAErB,SAAA;AAAA,IACLC,EAAU,KAAK,KAAKA,CAAS;AAAA,IAC7B,MAAM;AACJ,MAAAA,EAAU,QAAQ,CAAMC,MAAA;AACnB,QAAAA,EAAA;AAAA,MAAA,CACJ;AAAA,IAAA;AAAA,EAEL;AACF;AAAA;ACmCgB,SAAAC,EAAaC,GAAeC,GAAiC;AAC3E,EAAAA,UAAY,CAAC;AACP,QAAA;AAAA,IACJ,WAAAC;AAAA,IACA,SAAAC;AAAA,IACA,WAAWC;AAAA,EAAA,IACTH,GACEI,IAAiBD,MAAqB,SAAY,KAAOA,GACzDE,IAAY,OAAOD,KAAmB,YACxC,MAAMA,IACNA,GAQEE,IAAQ,CAACC,GAAiBC,MAAmBC,MAAsB;AACnE,QAAAD,KAASH,KAAa;AACxB,YAAMK,IAAY,sDACZ,CAACC,GAAaC,GAAeC,CAAM,IAAI;AAAA,QAC3C,KAAK,CAAC,WAAW,SAAS,MAAM;AAAA,QAChC,OAAO,CAAC,aAAa,SAAS,KAAK;AAAA,QACnC,MAAM,CAAC,WAAW,SAAS,MAAM;AAAA,QACjCN,CAAK;AACP,cAAQA,CAAK;AAAA,QACX,KAAKM,CAAM,IACT,KACG,eAAe,SAAS;AAAA,UACvB,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,wBAAwB;AAAA,UACxB,UAAU;AAAA,QAAA,CACX,EACA,OAAO,oBAAI,KAAM,CAAA,CACtB,QAAQd,CAAK;AAAA,QACb,GAAGW,CAAS,qBAAqBC,CAAW,UAAUC,CAAa;AAAA,QACnE;AAAA,QACA,GAAGF,CAAS,IAAIT,IAAY,SAASA,CAAS,MAAM,EAAE,GAAGC,IAAU,oBAAoBA,CAAO,KAAK,EAAE;AAAA,QACrG,GAAGO;AAAA,MACL;AAAA,IAAA;AAAA,EAEJ;AAEQ,SAAA;AAAA,IACN,CAAC,OAAO,UAAU;AAAA,IAClB,CAAC,QAAQ,WAAW;AAAA,IACpB,CAAC,SAAS,YAAY;AAAA,IACZ,OAAe,CAAC9B,GAAK,CAAC4B,GAAOO,CAAW,OAClDnC,EAAI4B,CAAK,IAAID,EAAM,KAAK,QAAWC,GAAO,EAAK,GAC/C5B,EAAImC,CAAW,IAAIR,EAAM,KAAK,QAAWC,GAAO,EAAI,GAC7C5B,IACN,EAAY;AACjB;"}