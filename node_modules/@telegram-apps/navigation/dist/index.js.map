{"version":3,"file":"index.js","sources":["../src/history/getFirstNavigationEntry.ts","../src/history/isPageReload.ts","../src/ensurePrefix.ts","../src/url/createSafeURL.ts","../src/url/urlToPath.ts","../src/errors.ts"],"sourcesContent":["/**\n * Returns the first navigation entry from window.performance.\n * @returns First navigation entry or null, in case performance functionality is not supported\n * or navigation entry was not found.\n */\nexport function getFirstNavigationEntry(): PerformanceNavigationTiming | undefined {\n  return performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming | undefined;\n}\n","import { getFirstNavigationEntry } from './getFirstNavigationEntry.js';\n\n/**\n * @returns True, if the current page was reloaded.\n * @see https://stackoverflow.com/a/36444134/11894710\n */\nexport function isPageReload(): boolean {\n  const entry = getFirstNavigationEntry();\n  return !!entry && entry.type === 'reload';\n}\n","/**\n * Ensures that the specified value starts with the specified prefix. If it doesn't, function\n * appends it.\n * @param value - value to check.\n * @param prefix - prefix to add.\n * @returns Value with the prefix.\n */\nexport function ensurePrefix(value: string, prefix: string): string {\n  return value.startsWith(prefix) ? value : `${prefix}${value}`;\n}\n","import { ensurePrefix } from '@/ensurePrefix.js';\n\nimport type { URLLike } from './types.js';\n\n/**\n * Safely creates a new instance of URL with some predefined protocol \"http://\" and host \"a\".\n * @param urlOrPath - URL instance or path.\n */\nexport function createSafeURL(urlOrPath: string | Partial<URLLike>): URL {\n  return new URL(\n    typeof urlOrPath === 'string' ? urlOrPath : [\n      urlOrPath.pathname || '',\n      ensurePrefix(urlOrPath.search || '', '?'),\n      ensurePrefix(urlOrPath.hash || '', '#'),\n    ].join(''),\n    'http://a',\n  );\n}\n","import { createSafeURL } from './createSafeURL.js';\nimport type { URLLike } from './types.js';\n\n/**\n * Extracts path part from a URL.\n * @param urlOrPath - URL instance or path.\n */\nexport function urlToPath(urlOrPath: string | Partial<URLLike>): string {\n  const isAbsolute = (\n    typeof urlOrPath === 'string'\n      ? urlOrPath\n      : urlOrPath.pathname || ''\n  ).startsWith('/');\n  const url = createSafeURL(urlOrPath);\n  const { pathname } = url;\n\n  return `${isAbsolute ? pathname : pathname.slice(1)}${url.search}${url.hash}`;\n}\n","export const ERR_HISTORY_EMPTY = 'ERR_NAVIGATION_HISTORY_EMPTY';\nexport const ERR_CURSOR_INVALID = 'ERR_NAVIGATION_CURSOR_INVALID';"],"names":["getFirstNavigationEntry","isPageReload","entry","ensurePrefix","value","prefix","createSafeURL","urlOrPath","urlToPath","isAbsolute","url","pathname","ERR_HISTORY_EMPTY","ERR_CURSOR_INVALID"],"mappings":"AAKO,SAASA,IAAmE;AACjF,SAAO,YAAY,iBAAiB,YAAY,EAAE,CAAC;AACrD;ACDO,SAASC,IAAwB;AACtC,QAAMC,IAAQF,EAAwB;AACtC,SAAO,CAAC,CAACE,KAASA,EAAM,SAAS;AACnC;ACFgB,SAAAC,EAAaC,GAAeC,GAAwB;AAC3D,SAAAD,EAAM,WAAWC,CAAM,IAAID,IAAQ,GAAGC,CAAM,GAAGD,CAAK;AAC7D;ACDO,SAASE,EAAcC,GAA2C;AACvE,SAAO,IAAI;AAAA,IACT,OAAOA,KAAc,WAAWA,IAAY;AAAA,MAC1CA,EAAU,YAAY;AAAA,MACtBJ,EAAaI,EAAU,UAAU,IAAI,GAAG;AAAA,MACxCJ,EAAaI,EAAU,QAAQ,IAAI,GAAG;AAAA,IAAA,EACtC,KAAK,EAAE;AAAA,IACT;AAAA,EACF;AACF;ACVO,SAASC,EAAUD,GAA8C;AAChE,QAAAE,KACJ,OAAOF,KAAc,WACjBA,IACAA,EAAU,YAAY,IAC1B,WAAW,GAAG,GACVG,IAAMJ,EAAcC,CAAS,GAC7B,EAAE,UAAAI,MAAaD;AAErB,SAAO,GAAGD,IAAaE,IAAWA,EAAS,MAAM,CAAC,CAAC,GAAGD,EAAI,MAAM,GAAGA,EAAI,IAAI;AAC7E;ACjBO,MAAME,IAAoB,gCACpBC,IAAqB;"}