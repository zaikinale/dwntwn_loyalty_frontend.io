import { AbortablePromise } from 'better-promises';
import { EventPayload } from '@telegram-apps/bridge';
import { RequestOptionsNoCapture } from '../../../types.js';
/**
 * Requests the actual viewport content safe area insets information.
 * @param options - request options.
 * @throws {FunctionNotAvailableError} The environment is unknown
 * @throws {FunctionNotAvailableError} The SDK is not initialized
 * @throws {FunctionNotAvailableError} The function is not supported
 * @since Mini Apps v8.0
 * @example
 * if (requestContentSafeAreaInsets.isAvailable()) {
 *   const insets = await requestContentSafeAreaInsets();
 * }
 */
export declare const requestContentSafeAreaInsets: import('../../wrappers/wrapSafe.js').SafeWrapped<(options?: RequestOptionsNoCapture) => AbortablePromise<EventPayload<"content_safe_area_changed">>, true, never>;
/**
 * Requests viewport actual information from the Telegram application.
 * @param options - request options.
 * @example
 * if (requestViewport.isAvailable()) {
 *   const viewport = await requestViewport();
 * }
 */
export declare function requestViewport(options?: RequestOptionsNoCapture): AbortablePromise<EventPayload<'viewport_changed'>>;
/**
 * Requests the actual viewport safe area insets information.
 * @param options - request options.
 * @throws {FunctionNotAvailableError} The environment is unknown
 * @throws {FunctionNotAvailableError} The SDK is not initialized
 * @throws {FunctionNotAvailableError} The function is not supported
 * @since Mini Apps v8.0
 * @example
 * if (requestSafeAreaInsets.isAvailable()) {
 *   const insets = await requestSafeAreaInsets();
 * }
 */
export declare const requestSafeAreaInsets: import('../../wrappers/wrapSafe.js').SafeWrapped<(options?: RequestOptionsNoCapture) => AbortablePromise<EventPayload<"safe_area_changed">>, true, never>;
